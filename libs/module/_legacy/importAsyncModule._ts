// @ts-ignore
import undefault from '@lskjs/utils2/undefault';
// @ts-ignore
import isFunction from '@lskjs/utils2/isFunction';
// @ts-ignore
import isClass from '@lskjs/utils2/isClass';
import { IModule } from '../IModule.types';
// import typeChecks from './typeChecks';
// console.log('importFn2', fn, typeChecks(fn), Object.keys(fn), new String(fn), fn.name, fn.type, JSON.stringify(fn), fn.prototype, typeChecks(fn.prototype));

const importAsyncModule = async (fn: any): Promise<IModule> => {
  const pack = await (isFunction(fn) && !isClass(fn) ? fn() : fn);
  if (!Array.isArray(pack)) {
    if (pack.Module) {
      return {
        Module: await importAsyncModule(pack.Module),
        ...pack,
      };
    }
    return undefault(pack);
  }
  const [fn2, ...args] = pack;
  return [await importAsyncModule(fn2), ...args];
};

export default importAsyncModule;

